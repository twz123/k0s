# options for analysis running
run:
  timeout: 8m

  build-tags:
    - hack
  skip-dirs-use-default: false
  skip-files:
    - "zz_*"
  tests: true
  modules-download-mode: readonly
  allow-parallel-runners: true

linters:
  enable:
    - depguard  # Checks if package imports are in a list of acceptable packages
    - gofmt     # Checks whether code was gofmt-ed
    - goheader  # Checks is file headers matche a given pattern
    - revive    # Stricter drop-in replacement for golint
    - tenv      # Detects the usage of os.Setenv instead of t.Setenv since Go 1.17

linters-settings:
  depguard:
    packages:
      - gopkg.in/yaml*
  golint:
    min-confidence: 0
  goheader:
    template-path: .go-header.txt

issues:
  max-issues-per-linter: 0
  max-same-issues: 0
  exclude-rules:
    # https://github.com/denis-tingaikin/go-header/issues/18
    # This means that the header checks are ineffective for all files with build tags.
    - source: "^//go:build"
      linters:
        - goheader
    # Ignore deprecations: They shouldn't break the CI. If this were the case,
    # it would be pointless to have them. There's no way in reporting them as
    # warnings without having a non-zero exit code.
    # https://github.com/golangci/golangci-lint/pull/3184#issuecomment-1235438429
    - linters:
        - staticcheck
      text: "^SA1019:"


  # enable:
  #  - errorlint  # Find problems with the error wrapping scheme introduced in Go 1.13

  #   #- gocritic          # Opinionated Go source code linter
  #   #- nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL
  #   #- paralleltest      # Detects missing usage of t.Parallel() method in Go tests
  #   #- prealloc          # Finds slice declarations that could potentially be pre-allocated
  #   # - reassign # Checks that package variables are not reassigned
  #   #- tenv              # Detects the usage of os.Setenv instead of t.Setenv since Go 1.17
