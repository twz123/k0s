name: Build k0s amd64

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
    outputs:
      cache-key:
        description: The compiled binary's cache key.
        value: ${{ jobs.build.outputs.cache-key }}
      airgap-image-bundle-cache-key:
        description: The airgap image bundle's cache key.
        value: ${{ jobs.build.outputs.airgap-image-bundle-cache-key }}

jobs:
  build:
    name: ${{ inputs.target }}
    runs-on: ubuntu-22.04

    outputs:
      cache-key: build-k0s-amd64-${{ inputs.target }}-compiled-binary-${{ github.sha }}
      airgap-image-bundle-cache-key: build-k0s-amd64-${{ inputs.target }}-airgap-image-bundle-${{ steps.image-bundle-source.outputs.hash }}

    steps:
      - name: "Build :: Checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # for `git describe`
          persist-credentials: false

      - name: "Build :: Prepare"
        run: .github/workflows/prepare-build-env.sh

      - name: "Cache :: k0s"
        uses: actions/cache@v3
        id: cache-compiled-binary
        with:
          key: build-k0s-amd64-${{ inputs.target }}-compiled-binary-${{ github.sha }}
          path: |
            k0s
            k0s.exe
            airgap-images.txt
            airgap-image-bundle-cache-key.txt

      - name: "Cache :: embedded binaries"
        uses: actions/cache@v3
        if: steps.cache-compiled-binary.outputs.cache-hit != 'true'
        with:
          key: build-k0s-amd64-${{ inputs.target }}-embedded-bins-${{ hashFiles('embedded-bins/**/*') }}
          path: |
            .bins.${{ inputs.target }}.stamp
            bindata_${{ inputs.target }}
            embedded-bins/staging/${{ inputs.target }}/bin/
            embedded-bins/Makefile.variables
            pkg/assets/zz_generated_offsets_${{ inputs.target }}.go

      - name: "Cache :: GOCACHE"
        uses: actions/cache@v3
        if: steps.cache-compiled-binary.outputs.cache-hit != 'true'
        with:
          key: build-k0s-amd64-${{ inputs.target }}-gocache-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            build-k0s-amd64-${{ inputs.target }}-gocache-${{ github.ref_name }}-
          path: |
            build/cache/go/build

      - name: "Cache :: GOMODCACHE"
        uses: actions/cache@v3
        if: steps.cache-compiled-binary.outputs.cache-hit != 'true'
        with:
          key: build-k0s-amd64-${{ inputs.target }}-gomodcache-${{ hashFiles('go.sum') }}
          path: |
            build/cache/go/mod

      - name: "Build :: k0s"
        if: steps.cache-compiled-binary.outputs.cache-hit != 'true'
        env:
          TARGET_OS: ${{ inputs.target }}
        run: |
          make bindata
          make --touch codegen
          make build

      - name: "Build :: Airgap image bundle list"
        if: inputs.target == 'linux'
        run: make airgap-images.txt && cat airgap-images.txt

        # Capture the calculated image bundle source hash in a build output, so
        # it can be shared between the cache actions in this job and in the
        # integration test matrix. Do this in a separate step, as the hashFiles
        # function is evaluated before the step execution. So all the required
        # files need to exist before that.
      - name: "Cache :: Airgap image bundle :: Calculate hash"
        id: cache-airgap-image-bundle-calc-hash
        if: inputs.target == 'linux'
        env:
          HASH_VALUE: ${{ hashFiles('Makefile', 'airgap-images.txt', 'hack/image-bundler/*') }}
        run: printf 'hash=%s\n' "$HASH_VALUE" >> "$GITHUB_OUTPUT"

      - name: "Cache :: Airgap image bundle"
        id: cache-airgap-image-bundle
        if: inputs.target == 'linux'
        uses: actions/cache@v3
        with:
          key: build-k0s-amd64-${{ inputs.target }}-airgap-image-bundle-${{ steps.image-bundle-source.outputs.hash }}
          path: airgap-image-bundle-${{ inputs.target }}-amd64.tar
          lookup-only: true

      - name: "Build :: Airgap image bundle"
        if: inputs.target == 'linux' && steps.cache-airgap-image-bundle.outputs.cache-hit != 'true'
        run: make airgap-image-bundle-${{ inputs.target }}-amd64.tar
