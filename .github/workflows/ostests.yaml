# OS testing matrix. See ../../hack/ostests/README.md for details.

name: OS tests

on:
  # push:
  workflow_dispatch:
    inputs:
      oses:
        description: The operating systems to test.
        required: true
        default: >-
          [
            "alpine_317",
            "centos_7", "centos_8", "centos_9",
            "debian_10", "debian_11",
            "fcos_38",
            "fedora_38",
            "flatcar",
            "rhel_7", "rhel_8", "rhel_9",
            "rocky_8", "rocky_9",
            "ubuntu_2004", "ubuntu_2204", "ubuntu_2304"
          ]
      network-providers:
        description: The k0s network providers to test.
        required: true
        default: >-
          [
            "kuberouter",
            "calico"
          ]

env:
  TERRAFORM_VERSION: 1.4.6
  K0SCTL_VERSION: 0.15.1
  AWS_REGION: us-east-1

jobs:
  build:
    name: Build
    uses: ./.github/workflows/build-k0s-amd64.yml
    with:
      target: linux
      airgap-image-bundle: false

  conformance:
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(github.event.inputs.oses) }}
        network-provider: ${{ fromJSON(github.event.inputs.network-providers) }}

    name: "${{ matrix.os }} :: ${{ matrix.network-provider }} :: conformance"
    runs-on: ubuntu-22.04
    needs: build

    env:
      TF_VAR_os_resource_name_prefix: gha-${{ github.run_id }}-${{ github.run_attempt }}"
      TF_VAR_os: ${{ matrix.os }}
      TF_VAR_cache_dir: ${{ github.workspace }}/.cache/k0s-ostests
      TF_VAR_k0sctl_executable_path: ${{ github.workspace }}/.cache/k0sctl
      TF_VAR_k0s_executable_path: ${{ github.workspace }}/.cache/k0s
      TF_VAR_k0s_network_provider: ${{ matrix.network-provider }}

    defaults:
      run:
        working-directory: hack/ostests/backends/aws

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: "Download :: k0s"
        uses: actions/download-artifact@v3
        with:
          name: k0s
          path: ${{ github.workspace }}/.cache

      - name: "Terraform :: Requisites"
        # env:
        #   OSTESTS_CACHE_HIT: ${{ steps.cache-compiled-executable.outputs.cache-hit }}
        run: |
          jq --version

          curl -sSLo "$TF_VAR_k0sctl_executable_path" "https://github.com/k0sproject/k0sctl/releases/download/v${K0SCTL_VERSION}/k0sctl-linux-x64"
          chmod +x -- "$TF_VAR_k0sctl_executable_path"
          "$TF_VAR_k0sctl_executable_path" version

          chmod +x -- "$TF_VAR_k0s_executable_path"
          k0sVersion="$("$TF_VAR_k0s_executable_path" version)"
          echo "TF_VAR_k0s_version=$k0sVersion" >>"$GITHUB_ENV"

      - name: "Terraform :: Setup"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: "Terraform :: Init"
        id: tf-init
        run: terraform init

      - name: "Terraform :: Apply"
        id: tf-apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          terraform apply -auto-approve

          kubeconfigPath="$(pwd)/kubeconfig"
          terraform output -raw k0s_kubeconfig > "$kubeconfigPath"
          echo "KUBECONFIG=$kubeconfigPath" >> "$GITHUB_ENV"

      - name: "Conformance tests :: Run"
        working-directory: inttest
        run: make check-conformance

      - name: "Conformance tests :: Retrieve results"
        id: ct-retrieve
        if: always() && steps.tf-apply.conclusion == 'success'
        working-directory: inttest
        run: make get-conformance-results

      - name: "Terraform :: Destroy"
        if: always() && steps.tf-init.conclusion == 'success'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform destroy -auto-approve

      - name: "Conformance tests :: Upload results"
        if: always() && steps.ct-retrieve.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.network-provider }}-conformance-results
          path: inttest/*_sonobuoy_*.tar.gz

      - name: "Conformance tests :: Check"
        working-directory: inttest
        run: |
          NUM_NOT_SKIPPED_OR_PASSED=$(bin/sonobuoy results *_sonobuoy_*.tar.gz -p=e2e --mode=detailed | jq --slurp '[.[] | select(.status != "skipped" and .status != "passed")] | length')
          echo Number of tests that weren't skipped and didn't pass: "$NUM_NOT_SKIPPED_OR_PASSED"
          if [ "$NUM_NOT_SKIPPED_OR_PASSED" != 0 ]; then
            exit 1
          ff

      - name: "k0sctl :: Upload logs"
        if: always() && steps.tf-init.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.network-provider }}-k0sctl-logs
          path: ~/.cache/k0sctl/k0sctl.log
