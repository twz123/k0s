# OS testing matrix. See ../../hack/ostests/README.md for details.

name: OS tests

on:
  # push:
  workflow_dispatch:
    inputs:
      e2e-parallel:
        type: boolean
        description: Whether to run tests in parallel.
        default: true
      e2e-focus:
        type: string
        description: The selector for the e2e tests to be run.
        default: \[Conformance\]
      oses:
        type: string
        description: The operating systems to test.
        required: true
        default: >-
          [
            "alpine_3_17",
            "centos_7", "centos_8", "centos_9",
            "debian_10", "debian_11",
            "fcos_38",
            "fedora_38",
            "flatcar",
            "oracle_7_9", "oracle_8_7", "oracle_9_1",
            "rhel_7", "rhel_8", "rhel_9",
            "rocky_8", "rocky_9",
            "ubuntu_2004", "ubuntu_2204", "ubuntu_2304"
          ]
      network-providers:
        description: The k0s network providers to test.
        required: true
        default: >-
          [
            "kuberouter",
            "calico"
          ]

env:
  TERRAFORM_VERSION: 1.4.6
  K0SCTL_VERSION: 0.15.0 # k0sproject/k0sctl#495
  AWS_REGION: us-east-1

jobs:
  build:
    name: Build
    uses: ./.github/workflows/build-k0s.yml
    with: { target-os: linux, target-arch: amd64 }

  conformance:
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(github.event.inputs.oses) }}
        network-provider: ${{ fromJSON(github.event.inputs.network-providers) }}

    name: "${{ matrix.os }} :: ${{ matrix.network-provider }} :: conformance"
    runs-on: ubuntu-22.04
    needs: build

    env:
      E2E_FOCUS: ${{ github.event.inputs.e2e-focus }}
      TF_VAR_os: ${{ matrix.os }}
      TF_VAR_additional_tags: '{
        "ostests.k0sproject.io/github-run-id"="${{ github.run_id }}",
        "ostests.k0sproject.io/github-run-attempt"="${{ github.run_attempt }}",
        }'
      TF_VAR_cloudwatch_enabled: "false"
      TF_VAR_cache_dir: ${{ github.workspace }}/.cache/k0s-ostests
      TF_VAR_k0sctl_executable_path: ${{ github.workspace }}/.cache/k0sctl
      TF_VAR_k0s_executable_path: ${{ github.workspace }}/.cache/k0s
      TF_VAR_k0s_network_provider: ${{ matrix.network-provider }}

    defaults:
      run:
        working-directory: hack/ostests/backends/aws

    steps:
      - name: "Workflow run :: Checkout"
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: "Workflow run :: Prepare"
        working-directory: ./
        run: |
          kubernetesVersion="$(./vars.sh kubernetes_version)"
          echo KUBERNETES_VERSION="$kubernetesVersion" >>"$GITHUB_ENV"

      - name: "Terraform :: Requisites :: Download k0s"
        uses: actions/download-artifact@v3
        with:
          name: k0s-linux-amd64
          path: ${{ github.workspace }}/.cache

      # - name: "Terraform :: Requisites :: Download kubectl"
      #   uses: azure/setup-kubectl@v3
      #   with:
      #     version: v${{ env.KUBERNETES_VERSION }}

      - name: "Terraform :: Requisites :: Variables"
        # env:
        #   OSTESTS_CACHE_HIT: ${{ steps.cache-compiled-executable.outputs.cache-hit }}
        run: |
          kubectl version --client
          jq --version

          curl -sSLo "$TF_VAR_k0sctl_executable_path" "https://github.com/k0sproject/k0sctl/releases/download/v${K0SCTL_VERSION}/k0sctl-linux-x64"
          chmod +x -- "$TF_VAR_k0sctl_executable_path"
          "$TF_VAR_k0sctl_executable_path" version

          chmod +x -- "$TF_VAR_k0s_executable_path"
          k0sVersion="$("$TF_VAR_k0s_executable_path" version)"
          echo "TF_VAR_k0s_version=$k0sVersion" >>"$GITHUB_ENV"

      - name: "Terraform :: Setup"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: "Terraform :: Init"
        id: tf-init
        run: terraform init

      - name: "Terraform :: Apply"
        id: tf-apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          terraform apply -auto-approve

          kubeconfigPath="$(pwd)/kubeconfig"
          terraform output -raw k0s_kubeconfig >"$kubeconfigPath"
          echo "KUBECONFIG=$kubeconfigPath" >>"$GITHUB_ENV"

      - name: "Conformance tests :: Run parallel tests"
        working-directory: inttest
        if: github.event.inputs.e2e-parallel
        timeout-minutes: 180 # three hours
        run: |
          make bin/sonobuoy
          bin/sonobuoy run -p e2e --wait=120 \
            --kubernetes-version=v"$KUBERNETES_VERSION" \
            --plugin-env=e2e.E2E_PARALLEL=true \
            --plugin-env=e2e.E2E_FOCUS="$E2E_FOCUS" \
            --plugin-env=e2e.E2E_SKIP='\[Serial\]' \
            --plugin-env=e2e.E2E_EXTRA_GINKGO_ARGS='-v --timeout=90m --procs=2'

      - name: "Conformance tests :: Retrieve parallel results"
        id: ct-retrieve-parallel
        if: always() && github.event.inputs.e2e-parallel && steps.tf-apply.conclusion == 'success'
        working-directory: inttest
        run: |
          make get-conformance-results
          mv *_sonobuoy_*.tar.gz sonobuoy-parallel.tar.gz

      - name: "Conformance tests :: Clear parallel run"
        if: always() && github.event.inputs.e2e-parallel && steps.tf-apply.conclusion == 'success'
        working-directory: inttest
        run: |
          bin/sonobuoy delete --all --wait
          echo E2E_FOCUS='\[Serial\].*'"$E2E_FOCUS" >>"$GITHUB_ENV"

      - name: "Conformance tests :: Run serial tests"
        working-directory: inttest
        timeout-minutes: 180 # three hours
        run: |
          make bin/sonobuoy
          bin/sonobuoy run -p e2e --wait=120 \
            --kubernetes-version=v"$KUBERNETES_VERSION" \
            --plugin-env=e2e.E2E_FOCUS="$E2E_FOCUS" \
            --plugin-env=e2e.E2E_EXTRA_GINKGO_ARGS='-v --timeout=90m'

      - name: "Conformance tests :: Retrieve serial results"
        id: ct-retrieve-serial
        if: always() && steps.tf-apply.conclusion == 'success'
        working-directory: inttest
        run: |
          make get-conformance-results
          mv *_sonobuoy_*.tar.gz sonobuoy-serial.tar.gz

      - name: "Terraform :: Destroy"
        if: always() && steps.tf-init.conclusion == 'success'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform destroy -auto-approve

      - name: "Conformance tests :: Upload results"
        if: always() && (steps.ct-retrieve-parallel.conclusion == 'success' || steps.ct-retrieve-serial.conclusion == 'success')
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.network-provider }}-sonobuoy-results
          path: inttest/sonobuoy-*.tar.gz

      - name: "Conformance tests :: Check"
        working-directory: inttest
        run: |
          for f in sonobuoy-*.tar.gz; do
            echo "::group::$f"
            bin/sonobuoy results "$f"
            numNotPassedOrSkipped=$(bin/sonobuoy results "$f" -p=e2e --mode=detailed | jq --slurp '[.[] | select(.status != "passed" and .status != "skipped")] | length')
            echo "Number of tests that didn't pass and weren't skipped: $numNotPassedOrSkipped"
            echo ::endgroup::
            if [ "$numNotPassedOrSkipped" != 0 ]; then
              exit 1
            fi
          done

      - name: "k0sctl :: Upload logs"
        if: always() && steps.tf-init.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.network-provider }}-k0sctl-logs
          path: ~/.cache/k0sctl/k0sctl.log
