name: OS tests

on:
  # push:
  workflow_dispatch:
    inputs:
      selected_oses:
        description: The Operating Systems to test (simple substring match)

env:
  TERRAFORM_VERSION: 1.4.6
  K0SCTL_VERSION: 0.15.1
  AWS_REGION: us-east-1

jobs:
  # terraform:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       backend:
  #         - aws
  #         - libvirt

  #   name: "OS tests :: terraform :: ${{ matrix.backend }}"
  #   runs-on: ubuntu-22.04

  #   defaults:
  #     run:
  #       working-directory: hack/ostests/backends/${{ matrix.backend }}

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         persist-credentials: false

  #     - uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: ${{ env.TERRAFORM_VERSION }}
  #         terraform_wrapper: false

  #     - run: terraform fmt -check
  #     - run: terraform init
  #     - run: terraform validate -no-color

  network-conformance:
    strategy:
      fail-fast: false
      matrix:
        os:
          - alpine_317
          - ubuntu_2204

    name: "NetConf :: AWS :: ${{ matrix.os }}"
    runs-on: ubuntu-22.04

    if: github.event.inputs.selected_oses == '' || contains(github.event.inputs.selected_oses, matrix.os)

    env:
      TF_VAR_os: ${{ matrix.os }}
      TF_VAR_cache_dir: ${{ github.workspace }}/.cache/k0s-ostests

    defaults:
      run:
        working-directory: hack/ostests/backends/aws

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: "Terraform :: Requisites"
        env:
          OSTESTS_OS: ${{ matrix.os }}
        run: |
          jq --version

          k0sctlBinaryPath="$(pwd)/k0sctl"
          curl -sSLo "$k0sctlBinaryPath" "https://github.com/k0sproject/k0sctl/releases/download/v${K0SCTL_VERSION}/k0sctl-linux-x64"
          chmod +x -- "$k0sctlBinaryPath"
          "$k0sctlBinaryPath" version
          echo "TF_VAR_k0sctl_binary=$k0sctlBinaryPath" >> "$GITHUB_ENV"

      - name: "Terraform :: Setup"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: "Terraform :: Init"
        id: tf-init
        run: terraform init

      - name: "Terraform :: Apply"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          terraform apply -auto-approve

          kubeconfigPath="$(pwd)/kubeconfig"
          terraform output -raw k0s_kubeconfig > "$kubeconfigPath"
          echo "KUBECONFIG=$kubeconfigPath" >> "$GITHUB_ENV"

      - name: "Network conformance tests :: Run"
        working-directory: inttest
        run: make check-network
        continue-on-error: true

      - name: "Network conformance tests :: Retrieve"
        working-directory: inttest
        run: make get-conformance-results

      - name: "Network conformance tests :: Upload"
        uses: actions/upload-artifact@v3
        with:
          name: network-conformance-results-${{ matrix.os }}
          path: inttest/*_sonobuoy_*.tar.gz

      - name: "Terraform :: Destroy"
        if: always() && steps.tf-init.conclusion == 'success'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform destroy -auto-approve
