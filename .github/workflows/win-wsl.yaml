on:
  push:
    branches:
      - win-wsl

jobs:
  wsl:
    runs-on: windows-2022

    steps:
      - name: Prepare WSL
        run: |
          $ErrorActionPreference = "Stop"
          $PSNativeCommandUseErrorActionPreference = $true

          & wsl --update
          & wsl --set-default-version 2
          & wsl --install Ubuntu
          & wsl --set-default Ubuntu

          # https://github.com/microsoft/WSL/issues/10138#issuecomment-2380431569
          @'
          [Unit]
          Description=A simple service to keep WSL alive
          Documentation=https://github.com/gardengim/keepwsl

          [Service]
          ExecStart=/mnt/c/Windows/System32/wsl.exe sleep infinity
          Restart=always

          [Install]
          WantedBy=default.target
          '@ | & wsl tee /etc/systemd/system/keepwsl.service | Out-Null

          & wsl -- systemctl daemon-reload
          & wsl -- systemctl start keepwsl.service

      - name: Start k0s controller in WSL
        id: start-controller
        run: |
          $ErrorActionPreference = "Stop"
          $PSNativeCommandUseErrorActionPreference = $true

          & wsl -- bash -euo pipefail -c 'curl --proto =https --tlsv1.2 -sSf https://get.k0s.sh | sh'
          & wsl mkdir /etc/k0s
          @'
          spec:
            storage:
              type: kine
            network:
              provider: calico
          '@ | & wsl tee /etc/k0s/k0s.yaml | Out-Null

          & wsl -- k0s install controller --debug --disable-components metrics-server
          # Do not use "k0s start" here, as its error reporting is poor.
          & wsl -- systemctl start k0scontroller.service

      - name: Download k0s for Windows
        run: |
          $ErrorActionPreference = "Stop"
          $PSNativeCommandUseErrorActionPreference = $true

          $k0sVersion = (Invoke-WebRequest -Uri https://docs.k0sproject.io/latest.txt).Content.Trim()
          $url = "https://github.com/k0sproject/k0s/releases/download/$k0sVersion/k0s-${k0sVersion}-amd64.exe"
          Write-Host "Downloading k0s $k0sVersion"
          Invoke-WebRequest -Uri $url -OutFile k0s.exe
          & .\k0s version

      - name: Prepare kubeconfig
        run: |
          $ErrorActionPreference = "Stop"
          $PSNativeCommandUseErrorActionPreference = $true

          & wsl k0s kubeconfig admin | Out-File -FilePath kubeconfig -Encoding utf8
          "KUBECONFIG=" + (Resolve-Path "kubeconfig").Path | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Get join token
        run: |
          $ErrorActionPreference = "Stop"
          $PSNativeCommandUseErrorActionPreference = $true

          for ($attempt = 1; $true; $attempt++) {
            try {
              Write-Host "Getting join token (attempt $attempt) ..."
              & wsl k0s token create --role=worker | Out-File -FilePath k0s-worker-token -Encoding utf8
            }
            catch {
              if ($attempt -gt 15) {
                throw
              }

              Write-Warning "Failed to get join token: $_"
              & wsl -- systemctl status k0scontroller.service
              Start-Sleep -Seconds 5
              continue
            }

            Write-Host "Join token written to file"
            break
          }

      - name: Start k0s worker
        timeout-minutes: 7
        run: |
          & .\k0s worker --token-file=k0s-worker-token

      - name: Monitor cluster a bit
        run: |
          $ErrorActionPreference = "Stop"
          $PSNativeCommandUseErrorActionPreference = $true

          for ($attempt = 1; $attempt -le 5; $attempt++) {
            try {
              & kubectl get node,po -A -owide
            }
            catch {
              if ($attempt -eq 5 ) {
                throw
              }
              & wsl -- systemctl status k0scontroller.service
            }
            Start-Sleep -Seconds 5
          }

      - name: k0 controller logs
        if: failure() && steps.start-controller.conclusion == 'success'
        run: |
          & wsl systemctl status k0scontroller.service
          & wsl journalctl --boot -u k0scontroller.service
