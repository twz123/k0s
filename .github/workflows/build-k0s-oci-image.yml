name: "Build :: k0s OCI image"

on:
  workflow_call:
    inputs:
      image-tag:
        type: string
        description: The image tag to use. Uses a temporary tag and pushes to ttl.sh if empty.
        default: ""
    secrets:
      ghcr-username:
        description: FIXME
        required: false
      ghcr-password:
        description: FIXME
        required: false
      docker-username:
        description: FIXME
        required: false
      docker-password:
        description: FIXME
        required: false

jobs:
  oci-image:
    runs-on: ubuntu-22.04
    steps:
      - name: "Build :: Checkout"
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: "Build :: Prepare"
        env:
          REPO: ${{ github.repository }}
          TAG: ${{ inputs.image-tag }}
          SHA: ${{ github.sha }}
          RUN_ID: ${{ github.run_id }}
        run: |
          if [ -z "$TAG" ]; then
            echo BUILDX_OUTPUTS=type=oci,dest=image.tar >>"$GITHUB_ENV"
          fi

          alpinePatchVersion="$(./vars.sh alpine_patch_version)"
          echo "ALPINE_PATCH_VERSION=$alpinePatchVersion" >>"$GITHUB_ENV"

      - name: "Download :: k0s-linux-amd64"
        uses: actions/download-artifact@v4
        with:
          name: k0s-linux-amd64
          path: ./k0s-amd64
      - name: "Download :: k0s-linux-arm64"
        uses: actions/download-artifact@v4
        with:
          name: k0s-linux-arm64
          path: ./k0s-arm64
      - name: "Download :: k0s-linux-arm"
        uses: actions/download-artifact@v4
        with:
          name: k0s-linux-arm
          path: ./k0s-arm

      - name: "Build :: Make binaries executable"
        run: chmod +x ./k0s-{amd64,arm64,arm}/k0s

      - name: "Docker :: Set up Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Docker :: Login to GitHub Container Registry"
        uses: docker/login-action@v3
        if: inputs.image-tag != ''
        with:
          registry: ghcr.io
          username: ${{ secrets.ghcr-username }}
          password: ${{ secrets.ghcr-password }}

      - name: "Docker :: Login to Docker Hub"
        uses: docker/login-action@v3
        if: inputs.image-tag != ''
        with:
          username: ${{ secrets.docker-username }}
          password: ${{ secrets.docker-password }}

      - name: "Docker :: Build image"
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          tags: |
            ghcr.io/k0sproject/k0s:${{ needs.release.outputs.image_tag }}
            docker.io/k0sproject/k0s:${{ needs.release.outputs.image_tag }}
          build-args: |
            ALPINE_VERSION=${{ env.ALPINE_PATCH_VERSION }}
          push: ${{ env.BUILDX_OUTPUTS == '' }}
          outputs: ${{ env.BUILDX_OUTPUTS }}

      # Ideally, an anonymous image could be pushed to ttl.sh. In practice,
      # though, ttl.sh is fronted by Cloudflare. Cloudflare doesn't accept huge
      # unchunked POST requests, and, in turn, containerd doesn't support
      # chunked transfer encoding. Hence, pushing via buildx/containerd will
      # fail.
      #
      # https://github.com/containerd/containerd/pull/7459
      # https://github.com/replicatedhq/ttl.sh/issues/104

      - name: "Upload :: OCI image archive :: Compress"
        # Pre-compress image so that upload-action doesn't try to do it.
        # https://github.com/actions/upload-artifact/issues/199
        run: zstdmt image.tar

      - name: "Upload :: OCI image archive"
        uses: actions/upload-artifact@v3
        with:
          name: k0s-oci-image.tar.zst
          path: image.tar.zst

      # # The manual push step is solely required when pushing to ttl.sh, which is
      # # fronted by cloudflare. Cloudflare doesn't accept huge unchunked POST
      # # requests, and, in turn, containerd doesn't support chunked transfer
      # # encoding. Hence, pushing via buildx/containerd will fail. Pushing via
      # # skopeo will work fine, though.
      # #
      # # https://github.com/containerd/containerd/pull/7459
      # # https://github.com/replicatedhq/ttl.sh/issues/104
      # - name: "Docker :: Push image manually"
      #   if: env.BUILDX_OUTPUTS != ''
      #   run: |
      #     sudo apt-get -y update
      #     sudo apt-get -y install skopeo
      #     skopeo --version
      #     tar xf image.tar -O index.json | jq -r '.manifests[] | @sh "skopeo copy --multi-arch all --preserve-digests oci-archive:image.tar \("docker://" + .annotations["io.containerd.image.name"])"' | sh -eux
