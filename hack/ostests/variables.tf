variable "resource_name_prefix" {
  type        = string
  description = "Prefix to be prepended to all resource names. Will be autogenerated if null."
  default     = null

  validation {
    condition     = var.resource_name_prefix == null || can(regex("^([a-z][a-z0-9-_]*)?$", var.resource_name_prefix))
    error_message = "Invalid resource name prefix."
  }
}

variable "cache_dir" {
  type        = string
  description = <<-EOD
    The directory in which to place local files. Will be autogenerated
    based on the resource name prefix if omitted.
  EOD
  default     = null

  validation {
    condition     = var.cache_dir == null ? true : length(var.cache_dir) != 0
    error_message = "The cache directory may not be empty."
  }
}

variable "additional_tags" {
  type        = map(string)
  description = "Additional tags to be added to resources and metrics."
  default     = {}
  nullable    = false
}

variable "os" {
  type        = string
  description = "The underlying OS for the to-be-provisioned cluster."
}

variable "k0sctl_executable_path" {
  type        = string
  description = "Path to the k0sctl executable to use for local-exec provisioning."
  default     = "k0sctl"
  nullable    = false

  validation {
    condition     = length(var.k0sctl_executable_path) != 0
    error_message = "Path to the k0sctl executable may not be empty."
  }
}

variable "k0s_executable_path" {
  type        = string
  description = "Path to the k0s executable to use, or null if it should be downloaded."
  default     = null

  validation {
    condition     = var.k0s_executable_path == null ? true : length(var.k0s_executable_path) != 0
    error_message = "Path to the k0sctl executable may not be empty."
  }
}

variable "k0s_version" {
  type        = string
  nullable    = false
  description = "The k0s version to deploy on the nodes. May be an exact version, \"stable\" or \"latest\"."

  validation {
    condition     = length(var.k0s_version) != 0
    error_message = "The k0s version may not be empty."
  }
}

variable "k0s_network_provider" {
  type        = string
  description = "The k0s network provider to use (either kuberouter or calico)."
  default     = "kuberouter"

  validation {
    condition     = var.k0s_network_provider == "kuberouter" || var.k0s_network_provider == "calico"
    error_message = "Unsupported k0s CNI stack."
  }
}
