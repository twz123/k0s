//go:build ignore
// +build ignore

/*
Copyright 2022 k0s authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"bytes"
	"compress/gzip"
	"errors"
	"flag"
	"fmt"
	"go/format"
	"io"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"golang.org/x/sync/errgroup"
)

var Usage = func() {
	fmt.Fprintf(os.Stderr, "Usage: %s [options] <fileSpecs>\n", os.Args[0])
	flag.PrintDefaults()
}

type fileInfo struct {
	Name                       string
	Offset, Size, OriginalSize int64
}

func compressFiles(destDir string) ([]*fileInfo, error) {
	var tmpFiles []*fileInfo
	g := new(errgroup.Group)
	for argPos, fileSpec := range flag.Args() {
		var sourceSpec, destSpec string
		parts := strings.Split(fileSpec, ":")
		switch len(parts) {
		case 1:
			sourceSpec = fileSpec
			destSpec = fileSpec + ".gz"
		case 2:
			sourceSpec = parts[0]
			destSpec = parts[1] + ".gz"
		default:
			return nil, fmt.Errorf("more than one colon in argument %d: %q", argPos+1, fileSpec)
		}

		info, err := os.Stat(sourceSpec)
		if err != nil {
			return nil, err
		}

		originalSize := info.Size()

		tmpFiles = append(tmpFiles, &fileInfo{
			Name:         destSpec,
			OriginalSize: originalSize,
		})

		dstPath := filepath.Join(destDir, destSpec)
		err = os.MkdirAll(filepath.Dir(dstPath), 0777)
		if err != nil {
			return nil, err
		}
		g.Go(func() error {
			copiedBytes, err := func() (int64, error) {
				inf, err := os.Open(sourceSpec)
				if err != nil {
					return 0, err
				}
				defer inf.Close()

				outf, err := os.OpenFile(dstPath, os.O_WRONLY|os.O_CREATE|os.O_EXCL, 0666)
				if err != nil {
					return 0, err
				}
				defer outf.Close()

				gz, err := gzip.NewWriterLevel(outf, gzip.BestCompression)
				if err != nil {
					return 0, err
				}
				defer gz.Close()

				return io.Copy(gz, inf)
			}()
			if err != nil {
				return err
			}
			if copiedBytes != originalSize {
				return fmt.Errorf("expected file size of %q was %d, but %d bytes were copied", sourceSpec, originalSize, copiedBytes)
			}

			fi, err := os.Stat(dstPath)
			if err != nil {
				return err
			}

			fmt.Fprintf(os.Stderr, "%s: %d/%d MiB\n", destSpec, fi.Size()/(1024*1024), originalSize/(1024*1024))
			return nil
		})
	}

	if err := g.Wait(); err != nil {
		return nil, err
	}

	return tmpFiles, nil
}

func writeBinData(tmpFiles []*fileInfo, dir string, outf io.Writer) (int64, error) {
	var offset int64

	for _, t := range tmpFiles {
		inf, err := os.Open(filepath.Join(dir, t.Name))
		if err != nil {
			return 0, err
		}

		copiedBytes, err := io.Copy(outf, inf)
		inf.Close()
		if err != nil {
			return 0, err
		}

		t.Offset = offset
		t.Size = copiedBytes

		offset += copiedBytes
	}

	return offset, nil
}

func generateBindata() error {
	var pkg, binDataPath, goFilePath string

	flag.StringVar(&pkg, "pkg", "main", "Package name to use in the generated code.")
	flag.StringVar(&binDataPath, "o", "./bindata", "Optional name of the output file to be generated.")
	flag.StringVar(&goFilePath, "gofile", "./bindata.go", "Optional name of the go file to be generated.")
	flag.Parse()

	if flag.NArg() == 0 {
		return errors.New("no arguments given")
	}

	dir, err := os.MkdirTemp("", "k0sbuild-gen-bindata-")
	if err != nil {
		return fmt.Errorf("failed to create temporary directory: %w", err)
	}
	defer os.RemoveAll(dir)

	tmpFiles, err := compressFiles(dir)
	if err != nil {
		return err
	}

	binDataFile, err := os.Create(binDataPath)
	if err != nil {
		return err
	}
	fmt.Fprintf(os.Stderr, "Writing %s...\n", binDataPath)
	binDataSize, err := writeBinData(tmpFiles, dir, binDataFile)
	binDataFile.Close()
	if err != nil {
		os.Remove(binDataPath)
		return err
	}

	var goCodeBytes bytes.Buffer
	err = packageTemplate.Execute(&goCodeBytes, struct {
		OutFile     string
		Pkg         string
		BinData     []*fileInfo
		BinDataSize int64
	}{
		OutFile:     binDataPath,
		Pkg:         pkg,
		BinData:     tmpFiles,
		BinDataSize: binDataSize,
	})

	goCode, err := format.Source(goCodeBytes.Bytes())
	if err != nil {
		return err
	}

	goFile, err := os.Create(goFilePath)
	if err != nil {
		return err
	}
	_, err = goFile.Write(goCode)
	goFile.Close()
	if err != nil {
		os.Remove(goFilePath)
		return err
	}

	return nil
}

func main() {
	if err := generateBindata(); err != nil {
		fmt.Fprintln(os.Stderr, "Error:", err)
		os.Exit(1)
	}
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.

// datafile: {{ .OutFile }}

package {{ .Pkg }}

var (
	BinData = map[string]struct{ offset, size, originalSize int64 }{
	{{- range .BinData }}
		"{{ .Name }}": { {{ .Offset }}, {{ .Size }}, {{ .OriginalSize }}},
	{{- end }}
	}

	BinDataSize int64 = {{ .BinDataSize }}
)
`))
