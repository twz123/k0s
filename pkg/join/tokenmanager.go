/*
Copyright 2020 k0s authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package join

import (
	"bytes"
	"context"
	"fmt"
	"slices"
	"time"

	k8sutil "github.com/k0sproject/k0s/pkg/kubernetes"

	corev1 "k8s.io/api/core/v1"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/fields"
	"k8s.io/client-go/kubernetes"
	tokenutil "k8s.io/cluster-bootstrap/token/util"
	bootstraptokenv1 "k8s.io/kubernetes/cmd/kubeadm/app/apis/bootstraptoken/v1"

	"github.com/sirupsen/logrus"
)

type TokenMeta struct {
	ID     string
	Role   string
	Expiry string
}

func (m TokenMeta) ToArray() []string {
	return []string{m.ID, m.Role, m.Expiry}
}

// NewTokenManager creates a new token manager using given kubeconfig
func NewTokenManager(kubeconfig string) (*TokenManager, error) {
	logrus.Debugf("loading kubeconfig from: %s", kubeconfig)
	client, err := k8sutil.NewClientFromFile(kubeconfig)
	if err != nil {
		return nil, err
	}
	return &TokenManager{
		client: client,
	}, nil
}

// NewTokenManagerForClient creates a new token manager using given client
func NewTokenManagerForClient(client kubernetes.Interface) (*TokenManager, error) {
	return &TokenManager{
		client: client,
	}, nil
}

// TokenManager is responsible to manage the join tokens in kube API as secrets in kube-system namespace
type TokenManager struct {
	client kubernetes.Interface
}

func RandomBootstrapSecret(role string, ttl time.Duration) (*corev1.Secret, *bootstraptokenv1.BootstrapTokenString, error) {
	token := bootstraptokenv1.BootstrapToken{
		TTL: &metav1.Duration{Duration: ttl},
	}

	var err error
	token.Token, err = generateBootstrapToken()
	if err != nil {
		return nil, nil, fmt.Errorf("failed to generate bootstrap token: %w", err)
	}

	var legacyUsages []string // legacy usages for backwards compatibility

	switch role {
	case RoleWorker:
		token.Description = "Worker bootstrap token generated by k0s"
		token.Usages = append(token.Usages, "authentication")
	case RoleController:
		token.Description = "Controller bootstrap token generated by k0s"
		token.Usages = append(token.Usages, "controller-join")
		legacyUsages = append(legacyUsages, "controller-join")
	default:
		return nil, nil, fmt.Errorf("unsupported role %q", role)
	}

	secret := bootstraptokenv1.BootstrapTokenToSecret(&token)
	for _, usage := range legacyUsages {
		// Add the usages also in their legacy form.
		secret.Data["usage-"+usage] = []byte("true")
	}

	return secret, token.Token, nil
}

// Create creates a new bootstrap token
func (m *TokenManager) Create(ctx context.Context, valid time.Duration, role string) (*bootstraptokenv1.BootstrapTokenString, error) {
	secret, token, err := RandomBootstrapSecret(role, valid)
	if err != nil {
		return nil, err
	}

	_, err = m.client.CoreV1().Secrets(metav1.NamespaceSystem).Create(ctx, secret, metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}

	return token, nil
}

// List returns all the join tokens.
func (m *TokenManager) List(ctx context.Context) (tokens []TokenMeta, _ error) {
	secrets, err := m.client.CoreV1().Secrets(metav1.NamespaceSystem).List(ctx, metav1.ListOptions{
		FieldSelector: fields.OneTermEqualSelector("type", string(corev1.SecretTypeBootstrapToken)).String(),
	})
	if err != nil {
		return nil, err
	}

	for _, secret := range secrets.Items {
		parsed, err := bootstraptokenv1.BootstrapTokenFromSecret(&secret)
		if err != nil {
			continue // ignore invalid tokens
		}

		token := TokenMeta{ID: parsed.Token.ID}

		if slices.Contains(parsed.Usages, "controller-join") {
			token.Role = "controller"
		} else if bytes.Equal(secret.Data["usage-controller-join"], []byte("true")) {
			// Legacy form of token usage
			token.Role = "controller"
		} else if slices.Contains(parsed.Usages, "authentication") {
			token.Role = "worker"
		}

		if parsed.Expires != nil {
			token.Expiry = parsed.Expires.UTC().Format(time.RFC3339)
		}

		tokens = append(tokens, token)
	}

	return tokens, nil
}

func (m *TokenManager) Remove(ctx context.Context, tokenID string) error {
	err := m.client.CoreV1().Secrets(metav1.NamespaceSystem).Delete(ctx, tokenutil.BootstrapTokenSecretName(tokenID), metav1.DeleteOptions{})
	if apierrors.IsNotFound(err) {
		return nil
	}
	return err
}

// Generates a new, random Bootstrap Token.
func generateBootstrapToken() (*bootstraptokenv1.BootstrapTokenString, error) {
	token, err := tokenutil.GenerateBootstrapToken()
	if err != nil {
		return nil, err
	}

	return bootstraptokenv1.NewBootstrapTokenString(token)
}
