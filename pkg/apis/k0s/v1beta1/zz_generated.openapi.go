//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright k0s authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1beta1

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.APISpec":                        schema_pkg_apis_k0s_v1beta1_APISpec(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.CaResponse":                     schema_pkg_apis_k0s_v1beta1_CaResponse(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.Calico":                         schema_pkg_apis_k0s_v1beta1_Calico(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.CalicoImageSpec":                schema_pkg_apis_k0s_v1beta1_CalicoImageSpec(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.Chart":                          schema_pkg_apis_k0s_v1beta1_Chart(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterConfig":                  schema_pkg_apis_k0s_v1beta1_ClusterConfig(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterConfigList":              schema_pkg_apis_k0s_v1beta1_ClusterConfigList(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterConfigStatus":            schema_pkg_apis_k0s_v1beta1_ClusterConfigStatus(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterExtensions":              schema_pkg_apis_k0s_v1beta1_ClusterExtensions(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterImages":                  schema_pkg_apis_k0s_v1beta1_ClusterImages(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterSpec":                    schema_pkg_apis_k0s_v1beta1_ClusterSpec(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterTelemetry":               schema_pkg_apis_k0s_v1beta1_ClusterTelemetry(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ControllerManagerSpec":          schema_pkg_apis_k0s_v1beta1_ControllerManagerSpec(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.DualStack":                      schema_pkg_apis_k0s_v1beta1_DualStack(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.EnvoyProxy":                     schema_pkg_apis_k0s_v1beta1_EnvoyProxy(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.EtcdConfig":                     schema_pkg_apis_k0s_v1beta1_EtcdConfig(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.EtcdRequest":                    schema_pkg_apis_k0s_v1beta1_EtcdRequest(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.EtcdResponse":                   schema_pkg_apis_k0s_v1beta1_EtcdResponse(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ExternalCluster":                schema_pkg_apis_k0s_v1beta1_ExternalCluster(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.FeatureGate":                    schema_pkg_apis_k0s_v1beta1_FeatureGate(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.HelmExtensions":                 schema_pkg_apis_k0s_v1beta1_HelmExtensions(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec":                      schema_pkg_apis_k0s_v1beta1_ImageSpec(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.InstallSpec":                    schema_pkg_apis_k0s_v1beta1_InstallSpec(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KineConfig":                     schema_pkg_apis_k0s_v1beta1_KineConfig(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KonnectivitySpec":               schema_pkg_apis_k0s_v1beta1_KonnectivitySpec(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KubeProxy":                      schema_pkg_apis_k0s_v1beta1_KubeProxy(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KubeProxyIPTablesConfiguration": schema_pkg_apis_k0s_v1beta1_KubeProxyIPTablesConfiguration(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KubeProxyIPVSConfiguration":     schema_pkg_apis_k0s_v1beta1_KubeProxyIPVSConfiguration(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KubeRouter":                     schema_pkg_apis_k0s_v1beta1_KubeRouter(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KubeRouterImageSpec":            schema_pkg_apis_k0s_v1beta1_KubeRouterImageSpec(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.Network":                        schema_pkg_apis_k0s_v1beta1_Network(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.NodeLocalLoadBalancing":         schema_pkg_apis_k0s_v1beta1_NodeLocalLoadBalancing(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.Repository":                     schema_pkg_apis_k0s_v1beta1_Repository(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.SchedulerSpec":                  schema_pkg_apis_k0s_v1beta1_SchedulerSpec(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.StorageExtension":               schema_pkg_apis_k0s_v1beta1_StorageExtension(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.StorageSpec":                    schema_pkg_apis_k0s_v1beta1_StorageSpec(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.SystemUser":                     schema_pkg_apis_k0s_v1beta1_SystemUser(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.WorkerProfile":                  schema_pkg_apis_k0s_v1beta1_WorkerProfile(ref),
		"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.Yolo":                           schema_pkg_apis_k0s_v1beta1_Yolo(ref),
	}
}

func schema_pkg_apis_k0s_v1beta1_APISpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APISpec defines the settings for the K0s API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"address": {
						SchemaProps: spec.SchemaProps{
							Description: "Local address on which to bind an API",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"externalAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "The loadbalancer address (for k0s controllers running behind a loadbalancer)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"extraArgs": {
						SchemaProps: spec.SchemaProps{
							Description: "Map of key-values (strings) for any extra arguments to pass down to Kubernetes api-server process",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"k0sApiPort": {
						SchemaProps: spec.SchemaProps{
							Description: "Custom port for k0s-api server to listen on (default: 9443)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Custom port for kube-api server to listen on (default: 6443)",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"sans": {
						SchemaProps: spec.SchemaProps{
							Description: "List of additional addresses to push to API servers serving the certificate",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"address", "port", "sans"},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_CaResponse(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CaResponse defines the response type for /ca control API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"key": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "byte",
						},
					},
					"cert": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "byte",
						},
					},
					"saKey": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "byte",
						},
					},
					"saPub": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "byte",
						},
					},
				},
				Required: []string{"key", "cert", "saKey", "saPub"},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_Calico(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Calico defines the calico related config options",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"wireguard": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable wireguard-based encryption (default: false)",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"envVars": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables to configure Calico node (see https://docs.projectcalico.org/reference/node/configuration)",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"flexVolumeDriverPath": {
						SchemaProps: spec.SchemaProps{
							Description: "The host path for Calicos flex-volume-driver(default: /usr/libexec/k0s/kubelet-plugins/volume/exec/nodeagent~uds)",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipAutodetectionMethod": {
						SchemaProps: spec.SchemaProps{
							Description: "Host's IP Auto-detection method for Calico (see https://docs.projectcalico.org/reference/node/configuration#ip-autodetection-methods)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipV6AutodetectionMethod": {
						SchemaProps: spec.SchemaProps{
							Description: "Host's IPv6 Auto-detection method for Calico",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mtu": {
						SchemaProps: spec.SchemaProps{
							Description: "MTU for overlay network (default: 0)",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "vxlan (default) or ipip",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"overlay": {
						SchemaProps: spec.SchemaProps{
							Description: "Overlay Type (Always, Never or CrossSubnet)",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vxlanPort": {
						SchemaProps: spec.SchemaProps{
							Description: "The UDP port for VXLAN (default: 4789)",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"vxlanVNI": {
						SchemaProps: spec.SchemaProps{
							Description: "The virtual network ID for VXLAN (default: 4096)",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"wireguard", "flexVolumeDriverPath", "mtu", "mode", "overlay", "vxlanPort", "vxlanVNI"},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_CalicoImageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CalicoImageSpec config group for calico related image settings",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cni": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec"),
						},
					},
					"node": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec"),
						},
					},
					"kubecontrollers": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec"),
						},
					},
				},
				Required: []string{"cni", "node", "kubecontrollers"},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec"},
	}
}

func schema_pkg_apis_k0s_v1beta1_Chart(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Chart single helm addon",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"chartname": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"values": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"timeout": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int64",
						},
					},
					"order": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int32",
						},
					},
				},
				Required: []string{"name", "chartname", "version", "values", "namespace", "timeout", "order"},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_ClusterConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterConfig is the Schema for the clusterconfigs API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterConfigStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterConfigStatus", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_k0s_v1beta1_ClusterConfigList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterConfigList contains a list of ClusterConfig",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterConfig"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterConfig", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_k0s_v1beta1_ClusterConfigStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterConfigStatus defines the observed state of ClusterConfig",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_ClusterExtensions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterExtensions specifies cluster extensions",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"storage": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.StorageExtension"),
						},
					},
					"helm": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.HelmExtensions"),
						},
					},
				},
				Required: []string{"storage", "helm"},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.HelmExtensions", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.StorageExtension"},
	}
}

func schema_pkg_apis_k0s_v1beta1_ClusterImages(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterImages sets docker images for addon components",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"konnectivity": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec"),
						},
					},
					"pushgateway": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec"),
						},
					},
					"metricsserver": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec"),
						},
					},
					"kubeproxy": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec"),
						},
					},
					"coredns": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec"),
						},
					},
					"pause": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec"),
						},
					},
					"calico": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.CalicoImageSpec"),
						},
					},
					"kuberouter": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KubeRouterImageSpec"),
						},
					},
					"repository": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"default_pull_policy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"konnectivity", "pushgateway", "metricsserver", "kubeproxy", "coredns", "pause", "calico", "kuberouter"},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.CalicoImageSpec", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KubeRouterImageSpec"},
	}
}

func schema_pkg_apis_k0s_v1beta1_ClusterSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterSpec defines the desired state of ClusterConfig",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"api": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.APISpec"),
						},
					},
					"controllerManager": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ControllerManagerSpec"),
						},
					},
					"scheduler": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.SchedulerSpec"),
						},
					},
					"storage": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.StorageSpec"),
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.Network"),
						},
					},
					"workerProfiles": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.WorkerProfile"),
									},
								},
							},
						},
					},
					"telemetry": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterTelemetry"),
						},
					},
					"installConfig": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.InstallSpec"),
						},
					},
					"images": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterImages"),
						},
					},
					"extensions": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterExtensions"),
						},
					},
					"konnectivity": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KonnectivitySpec"),
						},
					},
					"featureGates": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.FeatureGate"),
									},
								},
							},
						},
					},
				},
				Required: []string{"api", "storage", "network", "telemetry"},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.APISpec", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterExtensions", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterImages", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ClusterTelemetry", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ControllerManagerSpec", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.FeatureGate", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.InstallSpec", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KonnectivitySpec", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.Network", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.SchedulerSpec", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.StorageSpec", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.WorkerProfile"},
	}
}

func schema_pkg_apis_k0s_v1beta1_ClusterTelemetry(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterTelemetry holds telemetry related settings",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Default: false,
							Type:    []string{"boolean"},
							Format:  "",
						},
					},
				},
				Required: []string{"enabled"},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_ControllerManagerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ControllerManagerSpec defines the fields for the ControllerManager",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"extraArgs": {
						SchemaProps: spec.SchemaProps{
							Description: "Map of key-values (strings) for any extra arguments you want to pass down to the Kubernetes controller manager process",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_DualStack(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DualStack defines network configuration for ipv4/ipv6 mixed cluster setup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"IPv6podCIDR": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"IPv6serviceCIDR": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_EnvoyProxy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvoyProxy describes configuration options required for using Envoy as the backing implementation for node-local load balancing.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "image specifies the OCI image that's being used for the Envoy Pod.",
							Ref:         ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec"),
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "imagePullPolicy specifies the pull policy being used for the Envoy Pod. Defaults to the default image pull policy.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiServerBindPort": {
						SchemaProps: spec.SchemaProps{
							Description: "apiServerBindPort is the port number on which to bind the Envoy load balancer for the Kubernetes API server to on a worker's loopback interface. This must be a valid port number, 0 < x < 65536. Default: 7443",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"konnectivityServerBindPort": {
						SchemaProps: spec.SchemaProps{
							Description: "konnectivityServerBindPort is the port number on which to bind the Envoy load balancer for the konnectivity server to on a worker's loopback interface. This must be a valid port number, 0 < x < 65536. Default: 7132",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec"},
	}
}

func schema_pkg_apis_k0s_v1beta1_EtcdConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EtcdConfig defines etcd related config options",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"externalCluster": {
						SchemaProps: spec.SchemaProps{
							Description: "ExternalCluster defines external etcd cluster related config options",
							Ref:         ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ExternalCluster"),
						},
					},
					"peerAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "Node address used for etcd cluster peering",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"extraArgs": {
						SchemaProps: spec.SchemaProps{
							Description: "Map of key-values (strings) for any extra arguments you want to pass down to the etcd process",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"externalCluster", "peerAddress"},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ExternalCluster"},
	}
}

func schema_pkg_apis_k0s_v1beta1_EtcdRequest(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EtcdRequest defines the etcd control api request structure",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"node": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"peerAddress": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"node", "peerAddress"},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_EtcdResponse(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EtcdResponse defines the etcd control api response structure",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ca": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.CaResponse"),
						},
					},
					"initialCluster": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"ca", "initialCluster"},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.CaResponse"},
	}
}

func schema_pkg_apis_k0s_v1beta1_ExternalCluster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExternalCluster defines external etcd cluster related config options",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"endpoints": {
						SchemaProps: spec.SchemaProps{
							Description: "Endpoints of external etcd cluster used to connect by k0s",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"etcdPrefix": {
						SchemaProps: spec.SchemaProps{
							Description: "EtcdPrefix is a prefix to prepend to all resource paths in etcd",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"caFile": {
						SchemaProps: spec.SchemaProps{
							Description: "CaFile is the host path to a file with CA certificate",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clientCertFile": {
						SchemaProps: spec.SchemaProps{
							Description: "ClientCertFile is the host path to a file with TLS certificate for etcd client",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clientKeyFile": {
						SchemaProps: spec.SchemaProps{
							Description: "ClientKeyFile is the host path to a file with TLS key for etcd client",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"endpoints", "etcdPrefix", "caFile", "clientCertFile", "clientKeyFile"},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_FeatureGate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FeatureGate specifies single feature gate",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the feature gate",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled or disabled",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"components": {
						SchemaProps: spec.SchemaProps{
							Description: "Components to use feature gate on, if empty `KubernetesComponents` is used as the list",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_HelmExtensions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HelmExtensions specifies settings for cluster helm based extensions",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"concurrencyLevel": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int32",
						},
					},
					"repositories": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.Repository"),
									},
								},
							},
						},
					},
					"charts": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.Chart"),
									},
								},
							},
						},
					},
				},
				Required: []string{"concurrencyLevel", "repositories", "charts"},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.Chart", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.Repository"},
	}
}

func schema_pkg_apis_k0s_v1beta1_ImageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageSpec container image settings",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"image", "version"},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_InstallSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstallSpec defines the required fields for the `k0s install` command",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"users": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.SystemUser"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.SystemUser"},
	}
}

func schema_pkg_apis_k0s_v1beta1_KineConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KineConfig defines the Kine related config options",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dataSource": {
						SchemaProps: spec.SchemaProps{
							Description: "kine datasource URL",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"dataSource"},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_KonnectivitySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KonnectivitySpec defines the requested state for Konnectivity",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"adminPort": {
						SchemaProps: spec.SchemaProps{
							Description: "admin port to listen on (default 8133)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"agentPort": {
						SchemaProps: spec.SchemaProps{
							Description: "agent port to listen on (default 8132)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_KubeProxy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeProxy defines the configuration for kube-proxy",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"metricsBindAddress": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"iptables": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KubeProxyIPTablesConfiguration"),
						},
					},
					"ipvs": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KubeProxyIPVSConfiguration"),
						},
					},
					"nodePortAddresses": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KubeProxyIPTablesConfiguration", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KubeProxyIPVSConfiguration"},
	}
}

func schema_pkg_apis_k0s_v1beta1_KubeProxyIPTablesConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeProxyIPTablesConfiguration contains iptables-related kube-proxy configuration @see https://github.com/kubernetes/kube-proxy/blob/v0.29.0/config/v1alpha1/types.go#L27-L48",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"masqueradeBit": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"masqueradeAll": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"localhostNodePorts": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"syncPeriod": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"minSyncPeriod": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_pkg_apis_k0s_v1beta1_KubeProxyIPVSConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeProxyIPVSConfiguration contains ipvs-related kube-proxy configuration @see https://github.com/kubernetes/kube-proxy/blob/v0.29.0/config/v1alpha1/types.go#L52-L78",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"syncPeriod": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"minSyncPeriod": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"scheduler": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"excludeCIDRs": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"strictARP": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"tcpTimeout": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"tcpFinTimeout": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"udpTimeout": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_pkg_apis_k0s_v1beta1_KubeRouter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeRouter defines the kube-router related config options",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"autoMTU": {
						SchemaProps: spec.SchemaProps{
							Description: "Auto-detection of used MTU (default: true)",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"mtu": {
						SchemaProps: spec.SchemaProps{
							Description: "Override MTU setting (autoMTU must be set to false)",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"metricsPort": {
						SchemaProps: spec.SchemaProps{
							Description: "Kube-router metrics server port. Set to 0 to disable metrics  (default: 8080)",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"hairpin": {
						SchemaProps: spec.SchemaProps{
							Description: "Admits three values: \"Enabled\" enables it globally, \"Allowed\" allows but services must be annotated explicitly and \"Disabled\" Defaults to \"Enabled\"",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hairpinMode": {
						SchemaProps: spec.SchemaProps{
							Description: "DEPRECATED: Use hairpin instead. Activates Hairpin Mode (allow a Pod behind a Service to communicate to its own ClusterIP:Port)",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"ipMasq": {
						SchemaProps: spec.SchemaProps{
							Description: "IP masquerade for traffic originating from the pod network, and destined outside of it (default: false)",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"peerRouterASNs": {
						SchemaProps: spec.SchemaProps{
							Description: "Comma-separated list of global peer addresses DEPRECATED: Use extraArgs with peerRouterASNs instead",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerRouterIPs": {
						SchemaProps: spec.SchemaProps{
							Description: "Comma-separated list of global peer ASNs DEPRECATED: Use extraArgs with peerRouterIPs instead",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"extraArgs": {
						SchemaProps: spec.SchemaProps{
							Description: "ExtraArgs are extra arguments to pass to kube-router Can be also used to override the default k0s managed kube-router arguments",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"autoMTU", "mtu", "metricsPort", "hairpin", "ipMasq", "peerRouterASNs", "peerRouterIPs"},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_KubeRouterImageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeRouterImageSpec config group for kube-router related images",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cni": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec"),
						},
					},
					"cniInstaller": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec"),
						},
					},
				},
				Required: []string{"cni", "cniInstaller"},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.ImageSpec"},
	}
}

func schema_pkg_apis_k0s_v1beta1_Network(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Network defines the network related config options",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"calico": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.Calico"),
						},
					},
					"dualStack": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.DualStack"),
						},
					},
					"kubeProxy": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KubeProxy"),
						},
					},
					"kuberouter": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KubeRouter"),
						},
					},
					"nodeLocalLoadBalancing": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeLocalLoadBalancing defines the configuration options related to k0s's node-local load balancing feature. NOTE: This feature is currently unsupported on ARMv7!",
							Ref:         ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.NodeLocalLoadBalancing"),
						},
					},
					"podCIDR": {
						SchemaProps: spec.SchemaProps{
							Description: "Pod network CIDR to use in the cluster",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"provider": {
						SchemaProps: spec.SchemaProps{
							Description: "Network provider (valid values: calico, kuberouter, or custom)",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceCIDR": {
						SchemaProps: spec.SchemaProps{
							Description: "Network CIDR to use for cluster VIP services",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clusterDomain": {
						SchemaProps: spec.SchemaProps{
							Description: "Cluster Domain",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"calico", "kubeProxy", "kuberouter", "podCIDR", "provider"},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.Calico", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.DualStack", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KubeProxy", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KubeRouter", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.NodeLocalLoadBalancing"},
	}
}

func schema_pkg_apis_k0s_v1beta1_NodeLocalLoadBalancing(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeLocalLoadBalancing defines the configuration options related to k0s's node-local load balancing feature. NOTE: This feature is currently unsupported on ARMv7!",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "enabled indicates if node-local load balancing should be used to access Kubernetes API servers from worker nodes. Default: false",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "type indicates the type of the node-local load balancer to deploy on worker nodes. Currently, the only supported type is \"EnvoyProxy\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"envoyProxy": {
						SchemaProps: spec.SchemaProps{
							Description: "envoyProxy contains configuration options related to the \"EnvoyProxy\" type of load balancing.",
							Ref:         ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.EnvoyProxy"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.EnvoyProxy"},
	}
}

func schema_pkg_apis_k0s_v1beta1_Repository(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Repository describes single repository entry. Fields map to the CLI flags for the \"helm add\" command",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"caFile": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"certFile": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"insecure": {
						SchemaProps: spec.SchemaProps{
							Default: false,
							Type:    []string{"boolean"},
							Format:  "",
						},
					},
					"keyfile": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"username": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"password": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"name", "url", "caFile", "certFile", "insecure", "keyfile", "username", "password"},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_SchedulerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SchedulerSpec defines the fields for the Scheduler",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"extraArgs": {
						SchemaProps: spec.SchemaProps{
							Description: "Map of key-values (strings) for any extra arguments you want to pass down to Kubernetes scheduler process",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_StorageExtension(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StorageExtenstion specifies cluster default storage",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"create_default_storage_class": {
						SchemaProps: spec.SchemaProps{
							Default: false,
							Type:    []string{"boolean"},
							Format:  "",
						},
					},
				},
				Required: []string{"type", "create_default_storage_class"},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_StorageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StorageSpec defines the storage related config options",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"etcd": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.EtcdConfig"),
						},
					},
					"kine": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KineConfig"),
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of the data store (valid values:etcd or kine)",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"etcd", "type"},
			},
		},
		Dependencies: []string{
			"github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.EtcdConfig", "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1.KineConfig"},
	}
}

func schema_pkg_apis_k0s_v1beta1_SystemUser(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SystemUser defines the user to use for each component",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"etcdUser": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kineUser": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"konnectivityUser": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeAPIserverUser": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeSchedulerUser": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_k0s_v1beta1_WorkerProfile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkerProfile worker profile",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "String; name to use as profile selector for the worker process",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"values": {
						SchemaProps: spec.SchemaProps{
							Description: "Worker Mapping object",
							Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
						},
					},
				},
				Required: []string{"name", "values"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/runtime.RawExtension"},
	}
}

func schema_pkg_apis_k0s_v1beta1_Yolo(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.EmbedOpenAPIDefinitionIntoV2Extension(common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Yolo is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number. TODO: Rename to Int32OrString",
				OneOf:       common.GenerateOpenAPIV3OneOfSchema(Yolo{}.OpenAPIV3OneOfTypes()),
				Format:      Yolo{}.OpenAPISchemaFormat(),
			},
		},
	}, common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Yolo is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number. TODO: Rename to Int32OrString",
				Type:        Yolo{}.OpenAPISchemaType(),
				Format:      Yolo{}.OpenAPISchemaFormat(),
			},
		},
	})
}
